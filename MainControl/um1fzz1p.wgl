using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Linq;
using System.Net.Sockets;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Navigation;
using System.Windows.Shapes;
using MainControl.MT_UDP;
using System.Net;
namespace MainControl
{
    /// <summary>
    /// MainWindow.xaml 的交互逻辑
    /// </summary>
    /// 

    #region /* Exported types ------------------------------------------------------------*/
    public enum DeviceId : byte
    {
        No_1 = 55,
        No_2 = 56,
        No_3 = 57,
        No_4 = 58
    }

    #endregion/* Exported types ------------------------------------------------------------*/
     
    public partial class MainWindow : Window
    {
        #region /* Private variables ---------------------------------------------------------*/
        private MtUdp m_ConsoleUdp = new MtUdp();
        private static Timer timer;
        private static readonly int m_LocalUdpPort = 10000;
        private bool InitOrWaitPassengerBtnClickFlag=false;
        private bool PF_InitOverFlag = false;
        private const byte DoorMounter = 4;
        #endregion

        public MainWindow()
        {
            InitializeComponent();
            //本地网络初始化
            m_ConsoleUdp.UdpInit(m_LocalUdpPort);

            //发送数据多媒体定时器
            // Create an AutoResetEvent to signal the timeout threshold in the
            // timer callback has been reached.
            var autoEvent = new AutoResetEvent(false);
            timer = new Timer(new TimerCallback(TimerTask), autoEvent, 0,10);
        }
        private void TimerTask(object timerState)
        {
            this.Dispatcher.Invoke(
                new System.Action(
                    delegate
                    {
                        //如果按下初始化按钮
                        if((InitOrWaitPassengerBtnClickFlag==true))         //(PF_InitOverFlag==false)&&
                        {
                            //如果安全门未远离
                            if((0x01==(m_ConsoleUdp.m_DataFromPlc[0]>>0x05))
                             &&(0x01 == (m_ConsoleUdp.m_DataFromPlc[0] >> 0x07))
                             && (0x01 == (m_ConsoleUdp.m_DataFromPlc[1] >> 0x01))
                             && (0x01 == (m_ConsoleUdp.m_DataFromPlc[1] >> 0x03))
                             )
                            {
                                //如果初始化未完成，且平台状态有不在中位时
                                if (((m_ConsoleUdp.m_sToHostBuf[0].nDOFStatus != (byte)(DOF_state.dof_neutral))
                                    || (m_ConsoleUdp.m_sToHostBuf[1].nDOFStatus != (byte)(DOF_state.dof_neutral))
                                    || (m_ConsoleUdp.m_sToHostBuf[2].nDOFStatus != (byte)(DOF_state.dof_neutral))
                                    || (m_ConsoleUdp.m_sToHostBuf[3].nDOFStatus != (byte)(DOF_state.dof_neutral)))
                                    &&(PF_InitOverFlag == false)
                                    )
                                {
                                    for (int i = 0; i < MtUdp.DeviceAmount; i++)
                                    {
                                        m_ConsoleUdp.DofUpToMedian(m_ConsoleUdp.m_RemoteIpEndpoint[i]);
                                    }
                                }
                                    //如果初始化未完成，且平台都在中位时
                                else if ((m_ConsoleUdp.m_sToHostBuf[0].nDOFStatus == (byte)(DOF_state.dof_neutral))
                                    && (m_ConsoleUdp.m_sToHostBuf[1].nDOFStatus == (byte)(DOF_state.dof_neutral))
                                    && (m_ConsoleUdp.m_sToHostBuf[2].nDOFStatus == (byte)(DOF_state.dof_neutral))
                                    && (m_ConsoleUdp.m_sToHostBuf[3].nDOFStatus == (byte)(DOF_state.dof_neutral))
                                    && (PF_InitOverFlag==false)
                                    )
                                {
                                    PF_InitOverFlag=true;
                                }
                                    //如果初始始化完成，且平台都不在底位时
                                else if(((m_ConsoleUdp.m_sToHostBuf[0].nDOFStatus != (byte)(DOF_state.dof_check_id))
                                    || (m_ConsoleUdp.m_sToHostBuf[1].nDOFStatus != (byte)(DOF_state.dof_check_id))
                                    || (m_ConsoleUdp.m_sToHostBuf[2].nDOFStatus != (byte)(DOF_state.dof_check_id))
                                    || (m_ConsoleUdp.m_sToHostBuf[3].nDOFStatus != (byte)(DOF_state.dof_check_id)))
                                    &&(PF_InitOverFlag == true)
                                    )
                                {
                                    for (int i = 0; i < MtUdp.DeviceAmount; i++)
                                    {
                                        m_ConsoleUdp.DofToBottom(m_ConsoleUdp.m_RemoteIpEndpoint[i]);
                                    }
                                }
                                    //如果初始化完成，且平台在底位时
                                else if ((m_ConsoleUdp.m_sToHostBuf[0].nDOFStatus == (byte)(DOF_state.dof_check_id))
                                    && (m_ConsoleUdp.m_sToHostBuf[1].nDOFStatus == (byte)(DOF_state.dof_check_id))
                                    && (m_ConsoleUdp.m_sToHostBuf[2].nDOFStatus == (byte)(DOF_state.dof_check_id))
                                    && (m_ConsoleUdp.m_sToHostBuf[3].nDOFStatus == (byte)(DOF_state.dof_check_id))
                                    && (PF_InitOverFlag==true)
                                    )
                                {

                                }
                                
                            }
                            else
                            {
                                for (byte i = 0; i < DoorMounter;i++ )
                                {
                                    SetCarDoorStatus(i, m_ConsoleUdp.m_DataToPlc);
                                }
                                m_ConsoleUdp.SendDataToPlc(m_ConsoleUdp.m_DataToPlc, m_ConsoleUdp.m_DataToPlc.Length, m_ConsoleUdp.m_PlcIpEndpoint);
                            }
                            for(int i=0;i<MtUdp.DeviceAmount;i++)
                            {

                            }
                        }
                        PlcDataHandler();
                        PlatformStatusIndicator();
                        //PlatformOperatorBtnHandler();
                    }
                    )
            );
        }
        #region //PLC数据处理
        private void PlcDataHandler()
        {
            #region //急停，运行，关机，复位按钮判断
            if (1 == ((m_ConsoleUdp.m_DataFromPlc[0] >> 0) & (0x01)))                             //判断急停按钮
            {
                //使软件按钮与硬件保持一致
                //待添加代码
                for (int i = 0; i < MtUdp.DeviceAmount; i++)
                {
                    m_ConsoleUdp.DofToEmergency(m_ConsoleUdp.m_RemoteIpEndpoint[i]);
                }
            }
            else if (1 == ((m_ConsoleUdp.m_DataFromPlc[0] >> 1) & (0x01)))                        //判断运行按钮
            {
                //使软件按钮与硬件保持一致
                //待添加代码
                for (int i = 0; i < MtUdp.DeviceAmount; i++)
                {
                    m_ConsoleUdp.DofToRun(m_ConsoleUdp.m_RemoteIpEndpoint[i]);
                }
            }
            else if (1 == ((m_ConsoleUdp.m_DataFromPlc[0] >> 2) & (0x01)))                 //判断关机按钮
            {
                //使软件按钮与硬件保持一致
                //待添加代码
            }
            else if (1 == ((m_ConsoleUdp.m_DataFromPlc[0] >> 3) & (0x01)))                 //判断复位按钮
            {
                //使软件按钮与硬件保持一致
                //待添加代码
                for (int i = 0; i < MtUdp.DeviceAmount; i++)
                {
                    m_ConsoleUdp.DofToBottom(m_ConsoleUdp.m_RemoteIpEndpoint[i]);
                }
                if(((byte)MT_UDP.DOF_state.dof_check_id)==m_ConsoleUdp.m_sToHostBuf[0].nDOFStatus)
                {
                    //添加楼梯控制代码
                    //待添加代码
                    //m_ConsoleUdp.m_DataToPlc[0]=
                    //m_ConsoleUdp.SendDataToPlc()
                }
            } 
            #endregion

        }
        #endregion
        #region //平台初始化按钮处理
        private void PlatformOperatorBtnHandler()
        {
            for (int i = 0; i < MtUdp.DeviceAmount; i++)
            {
                if ((true == PlatformOperateBtn.IsChecked))
                {
                    m_ConsoleUdp.DofUpToMedian(m_ConsoleUdp.m_RemoteIpEndpoint[i]);
                }
                else
                {
                    //m_ConsoleUdp.DofToBottom(m_ConsoleUdp.m_RemoteIpEndpoint[i]);
                }
            }
        } 
        #endregion
        //指示平台网络连接状态
        private void PlatformStatusIndicator()
        {
            for (int i = 0; i < MtUdp.DeviceAmount; i++)
            {
                if (true == m_ConsoleUdp.m_DeviceConnectState[i])
                {
                    switch (i)
                    {
                        case 0:
                            CbNum1Platform.IsHitTestVisible = true;
                            CbNum1Platform.Background = Brushes.White;
                            break;
                        case 1:
                            CbNum2Platform.IsHitTestVisible = true;
                            CbNum2Platform.Background = Brushes.White;
                            break;
                        case 2:
                            CbNum3Platform.IsHitTestVisible = true;
                            CbNum3Platform.Background = Brushes.White;
                            break;
                        case 3:
                            CbNum4Platform.IsHitTestVisible = true;
                            CbNum4Platform.Background = Brushes.White;
                            break;
                    }

                }
                else
                {
                    switch (i)
                    {
                        case 0:
                            CbNum1Platform.IsHitTestVisible = false;
                            CbNum1Platform.Background = Brushes.Gray;
                            break;
                        case 1:
                            CbNum2Platform.IsHitTestVisible = false;
                            CbNum2Platform.Background = Brushes.Gray;
                            break;
                        case 2:
                            CbNum3Platform.IsHitTestVisible = false;
                            CbNum3Platform.Background = Brushes.Gray;
                            break;
                        case 3:
                            CbNum4Platform.IsHitTestVisible = false;
                            CbNum4Platform.Background = Brushes.Gray;
                            break;
                    }
                }
            }        
        }
        #region //车门锁定
        const UInt32 DoorCloseDelayMaxCounter = 50;
        UInt32[] DoorCloseDelayCounter = new UInt32[4];
        private void SetCarDoorStatus(byte index,byte[] status)
        {
            switch(index)
            {
                case 0:
                    if (DoorCloseDelayCounter[index] <= DoorCloseDelayMaxCounter)
                    {
                        status[2] |= 0x01 << 0;
                    }
                    else
                    {
                        status[2] &= (0x01 << 0)^0xFF;
                    }
                    DoorCloseDelayCounter[index]++;
                    break;
                case 1:
                    if (DoorCloseDelayCounter[index] <= DoorCloseDelayMaxCounter)
                    {
                        status[2] |= 0x01 << 1;
                    }
                    else
                    {
                        status[2] &= (0x01 << 1)^0xFF;
                    }
                    DoorCloseDelayCounter[index]++;
                    break;
                case 2:
                    if (DoorCloseDelayCounter[index] <= DoorCloseDelayMaxCounter)
                    {
                        status[2] |= 0x01 << 2;
                    }
                    else
                    {
                        status[2] &= (0x01 << 2)^0xFF;
                    }
                    DoorCloseDelayCounter[index]++;
                    break;
                case 3:
                    if (DoorCloseDelayCounter[index] <= DoorCloseDelayMaxCounter)
                    {
                        status[2] |= 0x01 << 3;
                    }
                    else
                    {
                        status[2] &= (0x01 << 3)^0xFF;
                    }
                    DoorCloseDelayCounter[index]++;
                    break;
            }
        }
        #endregion
        #region //楼梯锁定
        UInt32[] LadderDelayCounter = new UInt32[4];
        private void SetLadderAway(byte index, byte[] status)
        {
            switch (index)
            {
                case 0:
                    status[0] |= 0x01 << 5;
                    LadderDelayCounter[index]++;
                    break;
                case 1:
                    status[0] |= 0x01 << 6;
                    LadderDelayCounter[index]++;
                    break;
                case 2:
                    status[0] |= 0x01 << 7;
                    LadderDelayCounter[index]++;
                    break;
                case 3:
                    if (DoorCloseDelayCounter[index] <= DoorCloseDelayMaxCounter)
                    {
                        status[2] |= 0x01 << 3;
                    }
                    else
                    {
                        status[2] &= (0x01 << 3) ^ 0xFF;
                    }
                    DoorCloseDelayCounter[index]++;
                    break;
            }
        }
        #endregion
        private void PlatformOperateBtn_Click(object sender, RoutedEventArgs e)
        {
            if ((true == PlatformOperateBtn.IsChecked))
            {
                int i = 0;
                i = 10;
                //m_ConsoleUdp.DofUpToMedian(m_ConsoleUdp.m_RemoteIpEndpoint[0]);
            }
            if ((false == PlatformOperateBtn.IsChecked))
            {
                int i = 0;
                i = 11;
                //m_ConsoleUdp.DofUpToMedian(m_ConsoleUdp.m_RemoteIpEndpoint[0]);
            }
        }

        private void InitOrWaitPassenger_Click(object sender, RoutedEventArgs e)
        {
            InitOrWaitPassengerBtnClickFlag = true;
        }
    }
}
